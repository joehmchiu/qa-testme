# devops: deployment demo

parameters:
  - name: MODE
    displayName: Running Test or Prod mode 
    default: 'QA'
    type: string
    values: 
      - 'QA'
      - 'DEV'
      - 'TEST'
      - 'STAGE'
      - 'RPOD'
  - name: VM_TYPE
    displayName: VM Types
    type: string
    values:
    - docker
    - win
    - mssql
    - mariadb
  - name: docker
    displayName: IaC Server
    type: boolean
    default: true
  - name: win
    displayName: Windows Server
    type: boolean
    default: false
  - name: mssql
    displayName: MSSQL Server
    type: boolean
    default: false
  - name: mariadb
    displayName: MariaDB Server
    type: boolean
    default: false


# Set variables
variables:
  vm_type: ${{ parameters.VM_TYPE}}
  TEST: ${{ parameters.MODE }}
  group: "hello-001"

trigger:
- main

pool: AZP-Pool

stages:
- stage: Stage1
  displayName: Stage 1
  jobs:
  - job: init
    displayName: Display the file structure
    steps: 
    - script: |
        $(System.DefaultWorkingDirectory)/bin/drawit.sh peanut
        rm /tmp/dnsfile
        rm -rf /tmp/workspace
        dir
        pwd
        echo '$(Agent.BuildDirectory)'
        echo '$(System.DefaultWorkingDirectory)'

- stage: Stage2
  displayName: Create Resource Groups
  jobs:
  - job: rgs
    displayName: Create Resource Groups, Virtual Networks and Subnets
    steps: 
    - script: |
        perl 1.create-rg-vnet-snet.pl

- stage: Stage3
  displayName: Peering Virtual Networks
  jobs:
  - job: peerings
    displayName: Peering Virtual Networks
    steps: 
    - script: |
        perl 2.run-peering.pl

- stage: Stage4
  displayName: Create VHub Connections
  jobs:
  - job: vhub
    displayName: Create VHub VNet Connections
    steps: 
    - script: |
        sh $(System.DefaultWorkingDirectory)/bin/vhub-vnet-connections.sh

- stage: Stage5
  displayName: Generate VM Hashicorp
  jobs:
  - job: artifacts
    displayName: Generate VM Hashicorp
    steps: 
    - script: |
        perl 3.create-vms-artifacts.pl

- stage: Stage6
  displayName: Create Virtual Machines
  jobs:
  - job: mariadb
    displayName: Create MariaDB VM 
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.mariadb, true) }}:
      - bash: |
          for d in `ls -d /tmp/workspace/mariadb/*/`
          do
            cd $d/tf
            terraform init
            terraform apply -auto-approve
          done
  - job: mssql
    displayName: Create MSSQL VM 
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.mssql, true) }}:
      - bash: |
          for d in `ls -d /tmp/workspace/mssql/*/`
          do
            cd $d/tf
            terraform init
            terraform apply -auto-approve 
          done
  - job: win
    displayName: Create Windows VM 
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.win, true) }}:
      - bash: |
          for d in `ls -d /tmp/workspace/win/*/`
          do
            cd $d/tf
            terraform init
            terraform apply -auto-approve
          done
  - job: docker
    displayName: Create IaC VM 
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.docker, true) }}:
      - bash: |
          for d in `ls -d /tmp/workspace/docker/*/`
          do
            cd $d/tf
            terraform init
            terraform apply -auto-approve
          done

- stage: Stage7
  displayName: Application Installations
  jobs:
  - job: mariadb
    displayName: Create MariaDB Server
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.mariadb, true) }}:
      - bash: |
          $(System.DefaultWorkingDirectory)/bin/drawit.sh ansible
          for d in `ls -d /tmp/workspace/mariadb/*/`
          do
            cd $d/ansible
            ansible-playbook -i hosts playbook.yml
          done
  - job: mssql
    displayName: Create MSSQL DB Server
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.mssql, true) }}:
      - bash: |
          $(System.DefaultWorkingDirectory)/bin/drawit.sh ansible
          for d in `ls -d /tmp/workspace/mssql/*/`
          do
            cd $d/ansible
            ansible-playbook -i hosts playbook.yml
          done
  - job: win
    displayName: Create Windows Application
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.win, true) }}:
      - bash: |
          $(System.DefaultWorkingDirectory)/bin/drawit.sh ansible
          for d in `ls -d /tmp/workspace/win/*/`
          do
            echo "Reserved for Windows application"
          done
  - job: docker
    displayName: Create IaC Service
    continueOnError: true
    steps: 
    - ${{ if eq(parameters.docker, true) }}:
      - bash: |
          $(System.DefaultWorkingDirectory)/bin/drawit.sh ansible
          for d in `ls -d /tmp/workspace/docker/*/`
          do
            cd $d/ansible
            ansible-playbook -i hosts playbook.yml
          done

- stage: Stage8
  displayName: Create DNS Links
  jobs:
  - job: dns
    displayName: Create Private DNS Links
    steps: 
    - script: |
        perl 4.private-dns-link.pl

- stage: Stage9
  displayName: Clean Up
  jobs:
  - job: clean
    displayName: Clean Up 
    steps: 
    - script: |
        $(System.DefaultWorkingDirectory)/bin/drawit.sh tuesday
        $(System.DefaultWorkingDirectory)/bin/drawit.sh peanut
        # rm -rf /tmp/workspace





